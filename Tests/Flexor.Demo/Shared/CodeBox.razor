@using Blazaco.Editor;
@using Blazaco.Editor.Options;

<MonacoEditor ref="editor" Model="@editorModel" Width=@this.Width Height=@this.Height />

@functions {
    private EditorModel editorModel { get; set; }
    private MonacoEditor editor;


    [Parameter]
    protected string Value
    {
        get;
        set;
    }

    [Parameter]
    protected int Width { get; set; } = 400;

    [Parameter]
    protected int Height { get; set; } = 200;

    protected override async Task OnInitAsync()
    {
        await base.OnInitAsync();

        this.editorModel = new EditorModel()
        {
            Options = new EditorOptions
            {
                ReadOnly = true,
                Language = "text/html",
                Minimap = new MinimapOptions
                {
                    Enabled = false,
                },
                LineNumbers = "off",
                HideCursorInOverviewRuler = true,
                OverviewRulerBorder = false,
                OverviewRulerLanes = 0,
                RenderLineHighlight = "none",
                Contextmenu = false,
                ScrollBeyondLastLine = false,
            }
        };
    }

    protected override async Task OnAfterRenderAsync()
    {
        await base.OnAfterRenderAsync().ContinueWith(x => this.editor.SetValue(this.Value));
    }
}

